
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';


     log_format  upstream_log  '$remote_addr - $upstream_addr - $upstream_status  [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';


    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;


    # 开启压缩
    gzip  on;
    #  指定gzip功能压缩文件时使用的缓存空间的大小
    #  32 和 12  指定Nginx服务器需要向服务器申请的缓存空间的个数
    #  4k 和 8k 指定每个缓存空间的大小
    gzip_buffers 32 4k;
    # 指定gzip压缩级别，级别为1-9，默认为1，级别越高压缩率越高即压缩后的文件越小，但是越占用CPU，压缩率越小压缩后的文件越大，但是节约CPU。
    gzip_comp_level  4;
    # 针对不同客户端发起的请求进行有选择的打开或关闭gzip命令，后面跟浏览器的名称
    #gzip_disable MSIE[1-6]\.;      #这三个浏览器在发起请求后Nginx将不进行数据包的压缩。
    #gzip_http_version 1.0 | 1.1;    #对使用htto协议1.0和1.1的请求进行压缩
    # 设置最少压缩的数据包大小，小于此值的数据包将不被压缩
    gzip_min_length 1024;  #默认为20，建议设置位1KB，如果设置为0则表示压缩全部数据包
    # 在Nginx 服务器作为反向代理的时候有效，用于设置nginx 服务器是否对后端返回的结果进行gzip压缩
    gzip_proxied any; #off为关闭，any为压缩所有后端服务器返回的数据。
    # 设置Nginx服务器可以根据响应页面的类型进行选择性的打开或关闭gzip功能
    gzip_types       text/plain application/x-javascript text/css application/xml;
    # 用于设置是否在使用gzip功能时发送带有"vary:Accept-Encoding" 头域的响应头部
    gzip_vary on;
    gzip_static on; #on为开启并检查客户端浏览器是否中吃gzip压缩功能，off为关闭，always一直发送gzip压缩文件，而不检查浏览器是否支持gzip压缩



    #定义缓存
    proxy_connect_timeout 5;
    proxy_read_timeout 60;
    proxy_send_timeout 5;
    proxy_buffer_size 16k;
    proxy_buffers 4 64k;
    proxy_busy_buffers_size 128k;
    proxy_temp_file_write_size 128k;
    # 缓存临时目录
    proxy_temp_path  C:/Users/nginx-1.12.2/home/temp_dir;
    # 缓存目录    C:/Users/nginx-1.12.2/home/cache
    # levels=1:2  默认所有缓存文件都放在同一目录  假设levels=1:2，Nginx为将要缓存的资源生成的key为f4cd0fbc769e94925ec5540b6a4136d0，那么key的最后一位0，以及倒数第2-3位6d作为两级的子目录
    # keys_zone  在共享内存中设置一块存储区域来存放缓存的key和metadata（类似使用次数） 1m可以存储8000个key
    # inactive   未被访问文件在缓存中保留时间
    # use_temp_path  如果为off，则nginx会将缓存文件直接写入指定的cache文件中，而不是使用temp_path存储 official建议为off，避免文件在不同文件系统中不必要的拷贝
    # proxy_cache   启用proxy cache，并指定key_zone。另外，如果proxy_cache off表示关闭掉缓存
    proxy_cache_path C:/Users/nginx-1.12.2/home/cache levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;
	
 
	
	upstream yf.com{ 
	    server 192.168.1.139:8081   weight=2;
        server 192.168.1.139:8082   weight=1 ;       
    }


   upstream yf.com_V2 {
         server 192.168.1.139:8085 max_fails=1 fail_timeout=60;
   }
   upstream yf.com_V3 {
        server 192.168.1.139:8888 max_fails=1 fail_timeout=60;
   }	
	
	
	#禁止IP访问  
    server  
    {  
     listen 80 default;  
     server_name _;

	 #启用nginx status配置

	 location /ngx_status 
    {
        stub_status on;
        access_log off;
        #allow 127.0.0.1;
        #deny all;
    }
    } 

    server {
        access_log  logs/upstream/access.log  upstream_log;

        listen       80 ;
        server_name  yf.com;

        # 转发到的上游服务器地址，
        add_header backendIP $upstream_addr;
        # 上游服务器 状态码
        add_header backendCode $upstream_status;
        #  增加资源请求命中的标识
        add_header X-Cache $upstream_cache_status;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
		
		#禁用UA  ---禁止 curl 和 wget 工具模拟访问
		if ($http_user_agent ~* (wget|curl) ) {
               return 404;
        }

		 
		 #nginx禁止访问目录中可执行文件
		 #location ~* /(images|cache|media|logs|tmp)/.*.(php|pl|py|jsp|sh|cgi)$ {
         #   return 403;
         #   error_page 403 /403_error.html;
		 # }


		
		#动静分离  配置静态资源访问地址   也可以负载到静态资源服务器

		location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ {
           root F:/WEB/tomcat-balence-1.0-SNAPSHOT/WEB-INF/classes/static;
           # 缓存静态文件
           proxy_cache cache_one;
           proxy_cache_key $uri$is_args$args;
           proxy_cache_valid 200 302 1h;    响应吗  200  缓存   1小时
           proxy_cache_valid 301 1d;                301   缓存   1天
           proxy_cache_valid any 1m;                其他   缓存   1分钟



            #  设置资源访问白名单
           	valid_referers yf.*;
            if ($invalid_referer) {
            # 这个图片是盗链返回的图片，也就是替换盗链网站所有盗链的图片
                rewrite ^/ http://ww4.sinaimg.cn/bmiddle/051bbed1gw1egjc4xl7srj20cm08aaa6.jpg;
               #return 404;
            }
        }


        location / {
	
            root   html;
            index  1.html 1.htm;
			
			proxy_pass  http://yf.com;   # 反向代理
			
			#proxy_pass http://192.168.1.139:8081;   正向代理
			proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
			
			proxy_connect_timeout 1; 
            proxy_read_timeout 1; 
            proxy_send_timeout 1;           
            #deny  192.168.1.139;
            #allow all;			
        }
		
	
	#静态文件缓存
     location ~ .+\.(gif|jpg|jpeg|png|bmp|swf)$
    {
       expires 30d;
    }
 
    location ~ .+\.(js|css|xml|javascript|txt|csv)$
    {
       expires 30d;
    }
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
	
	
	
	


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
